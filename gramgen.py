# File:   grammargenerator.py
# Author: Joe Prado
# Date:   3/17/22
# Course: CS320, Winter 2022
# Brief:  Prints n random elements from a specified grammar

import random

class GrammarGenerator:
    """
    Stores the rules of a given grammar and allows the user to generate random phrases from that grammar

    Attributes:
        rules (dict): Stores the rules of a grammar
    """
    def __init__(self, file_name, separator, delimiter):
        self.rules = {}
        self.set_rules(file_name, separator, delimiter)

    def get_non_terminal_symbols(self):
        """
        Returns a list of non-terminal symbols for the grammar
        
        Returns:
            List[str]: A list of non-terminal symbols for the grammar
        """
        return self.rules.keys()

    def set_rules(self, file_name, separator, delimiter):
        """
        Assigns to the GrammarGenerator a new dictionary of rules from the given grammar file

        Args:
            file_name (str): the name of a file (incl. extension) containig a grammar
            separator (str): the designated symbol that separates non-terminal symbols from rules
            delimiter (str): the designated symbol that separates multiple rules for a single non-terminal

        Post:
            The contents of rules will be replaced by a new dictionary with the rules specified in file_name
        """
        file = open(file_name)
        self.rules.clear()

        for line in file:
            line = line.split(separator)
            
            # non-terminal symbol
            symbol = line[0].strip()
            
            # list of expansion rules
            self.rules[symbol] = line[1].strip().split(delimiter)
            
            # split rules into list of symbols
            for r in range(len(self.rules[symbol])):
                self.rules[symbol][r] = self.rules[symbol][r].split()
                
        file.close()

    def get_random_phrase(self, symbol):
        """
        Generates a random phrase from the given grammar symbol
        
        Args:
            symbol (str): a symbol (terminal or non-terminal) from which to generate a phrase

        Returns:
            str: A random phrase generated by the given start symbol
        """
        if symbol not in self.rules.keys(): # symbol is terminal
            return symbol
        
        # symbol is non-terminal; choose random rule from symbol
        # and generate a random phrase from that rule
        rule = random.choice(self.rules[symbol])
        phrase = []
        
        for r in rule:
            phrase.append(self.get_random_phrase(r))
            
        return " ".join(phrase)